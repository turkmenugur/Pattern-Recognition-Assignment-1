import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (accuracy_score, confusion_matrix, classification_report,
                           roc_curve, auc, ConfusionMatrixDisplay)

def load_and_prepare_data():
    data = pd.read_csv('TUANDROMD.csv')   
    data = data.dropna()   
    
    lb = LabelEncoder()
    data['Label'] = lb.fit_transform(data['Label'])
    print("Class Labels:", lb.classes_)
    
    return data

def train_model(X_train, y_train):
    model = LogisticRegression(
        C=1.0,                    
        max_iter=1000,            
        class_weight='balanced',   
        random_state=42,
        n_jobs=-1                 
    )
       
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]  
    
    cm = confusion_matrix(y_test, y_pred)
    
    tn, fp, fn, tp = cm.ravel()
    sensitivity = tp / (tp + fn)
    specificity = tn / (tn + fp)
    
    print("\nModel Evaluation Metrics:")
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
    print(f"Sensitivity: {sensitivity:.4f}")
    print(f"Specificity: {specificity:.4f}")
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))
    
    return cm, sensitivity, specificity, y_test, y_proba

def visualize_results(cm, sensitivity, specificity, y_test, y_proba):
    plt.close('all')
    
    fig1, ax1 = plt.subplots(figsize=(8, 6))
    ConfusionMatrixDisplay(confusion_matrix=cm,
                          display_labels=["Goodware", "Malware"]).plot(ax=ax1, cmap="Blues")
    ax1.set_title("Confusion Matrix")
    plt.tight_layout()
    plt.show()
    plt.close(fig1)
    # ROC Curve
    fig2, ax2 = plt.subplots(figsize=(8, 6))
    fpr, tpr, _ = roc_curve(y_test, y_proba)
    ax2.plot(fpr, tpr, 'b-', linewidth=2, label=f'ROC Curve (AUC = {auc(fpr, tpr):.3f})')
    ax2.plot([0, 1], [0, 1], 'r--', linewidth=1)  
    ax2.set_xlabel('False Positive Rate (1 - Specificity)')
    ax2.set_ylabel('True Positive Rate (Sensitivity)')
    ax2.set_title('ROC Curve')
    ax2.legend(loc='lower right')
    ax2.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()
    plt.close(fig2)

def main():
    data = load_and_prepare_data()
    # Split data
    X = data.drop('Label', axis=1)
    y = data['Label']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, 
                                                        random_state=42, stratify=y)
    # Train model
    model = train_model(X_train, y_train)
    # Evaluate model
    cm, sensitivity, specificity, y_test, y_proba = evaluate_model(model, X_test, y_test)
    
    visualize_results(cm, sensitivity, specificity, y_test, y_proba)

if __name__ == "__main__":

    main()

